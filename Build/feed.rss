<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Mark Stamer's Developer Profile</title><description></description><link>markstamer.github.io</link><atom:link href="markstamer.github.io/feed.rss" rel="self" type="application/rss+xml" /><language>en</language><generator>Ignite v0.1.0</generator><item><guid isPermaLink="true">markstamer.github.io/articles/effective-task-cancellation-in-swift</guid><title>Effective Task cancellation in Swift by leveraging Combine’s AnyCancellable</title><link>markstamer.github.io/articles/effective-task-cancellation-in-swift</link><description><![CDATA[When I first saw async/await Swift code, I was amazed at how elegant and concise it was. In practice, however, I often found that I had to wrap asynchronous functions in a Task to be able to cancel them. This meant keeping a reference to each individual task, which can quickly become tedious, especially since they involve generics. In this article I will explore ways to improve the ergonomics of task cancellation by leveraging Combine’s AnyCancellable.]]></description><pubDate>Fri, 23 Jun 2023 11:30:00 +0200</pubDate><dc:creator><![CDATA[Mark Stamer]]></dc:creator><category><![CDATA[async/await]]></category></item></channel></rss>